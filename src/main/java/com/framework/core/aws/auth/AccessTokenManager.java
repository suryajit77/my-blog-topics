package com.framework.core.aws.auth;

import com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider;
import com.amazonaws.services.cognitoidp.model.AuthenticationResultType;
import com.amazonaws.services.cognitoidp.model.InitiateAuthRequest;
import com.amazonaws.services.cognitoidp.model.InitiateAuthResult;
import com.framework.data.entity.Login;
import com.framework.service.api.LoginService;
import lombok.extern.slf4j.Slf4j;

import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

import static com.amazonaws.services.cognitoidp.model.AuthFlowType.ADMIN_NO_SRP_AUTH;
import static com.amazonaws.services.cognitoidp.model.AuthFlowType.USER_PASSWORD_AUTH;
import static com.framework.core.aws.auth.AWSClientBuilder.getAmazonCognitoIdentityClient;
import static com.framework.data.Constants.*;

/**
 * This class will generate Access Token to access the APIs for any given AWS App.
 * It calls the InitiateAuth operation with User Credentials with AppUsername and SRP.
 * We're using AmazonCognitoIdentity credentials object {AWS.CognitoIdentityCredentials} to enable authentication of users through third-party identity providers.
 */
@Slf4j
public class AccessTokenManager {

    private static LoginService loginService = new LoginService();
    private static String accessToken;
    private static Instant expiryTime;
    private static Boolean isAdmin = false;
    private static final int expiryDuration = 600;


    /**
     * @return It consumes AccessToken generated by the login service to generate a Bearer Token which could be used for accessing APIs.
     */
    public synchronized static String generateBearerAccessToken(){
        try {
            if (accessToken == null || Instant.now().isAfter(expiryTime)){

                Login loginResponse = loginService.getLoginResponse().as(Login.class);
                accessToken = loginResponse.getData().getAccess_token();
                isAdmin = loginResponse.getData().getIs_admin().equalsIgnoreCase("1");
                expiryTime = Instant.now().plusSeconds(expiryDuration - 5);

            } else {
                log.info("Token is still Active.");
            }
        } catch (Exception e) {
            log.info(e.getMessage());
            throw new RuntimeException(e.getMessage());
        } return accessToken;
    }


    /**
     * @return This method will generate unique AccessToken consumable by the Login Service to generate a Bearer Token.
     */
    public static String getAccessToken() {

        AuthenticationResultType authenticationResult = null;
        AWSCognitoIdentityProvider cognitoClient = getAmazonCognitoIdentityClient();

        final Map<String, String> authParams = new HashMap<>();

        authParams.put("USERNAME", APP_USERNAME);
        authParams.put("PASSWORD", APP_PASSWORD);
        authParams.put("SRP_A", new AuthenticationHelper(APP_POOL_ID).getRandomBigInteger().toString(16));

        final InitiateAuthRequest authRequest = new InitiateAuthRequest();

        authRequest.withAuthFlow(ADMIN_NO_SRP_AUTH)
                .withClientId(APP_CLIENT_ID)
                .withAuthParameters(authParams)
                .withAuthFlow(USER_PASSWORD_AUTH);

        InitiateAuthResult result = cognitoClient.initiateAuth(authRequest);
        authenticationResult = result.getAuthenticationResult();
        String accessToken = authenticationResult.getAccessToken();

        cognitoClient.shutdown();

        return accessToken;
    }


}
